@page "/login"
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Login - WhatsApp Clone</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <i class="fab fa-whatsapp"></i>
            <h1>WhatsApp Clone</h1>
            <p>Faça login para continuar</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        <form method="post" action="/api/AuthApi/login">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="form-group">
                <label for="username">Usuário:</label>
                <input name="Username" type="text" class="form-control" id="username" placeholder="Digite seu usuário" value="@loginModel.Username" required />
            </div>

            <div class="form-group">
                <label for="password">Senha:</label>
                <input name="Password" type="password" class="form-control" id="password" placeholder="Digite sua senha" value="@loginModel.Password" required />
            </div>

            <button type="submit" class="btn-login" disabled="@isLoggingIn">
                @if (isLoggingIn)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Entrando...</span>
                }
                else
                {
                    <i class="fas fa-sign-in-alt"></i>
                    <span>Entrar</span>
                }
            </button>
        </form>

        <div class="login-footer">
            <p>Não tem uma conta? <a href="/register">Registre-se aqui</a></p>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #075e54 0%, #128c7e 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
    }

    .login-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        width: 100%;
        max-width: 400px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    }

    .login-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .login-header i {
        font-size: 4rem;
        color: #25d366;
        margin-bottom: 1rem;
    }

    .login-header h1 {
        font-size: 2rem;
        font-weight: 300;
        margin-bottom: 0.5rem;
        color: #333;
    }

    .login-header p {
        color: #666;
        margin: 0;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s;
    }

    .form-control:focus {
        outline: none;
        border-color: #25d366;
    }

    .btn-login {
        width: 100%;
        background: #25d366;
        color: white;
        border: none;
        padding: 1rem;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-login:hover:not(:disabled) {
        background: #128c7e;
    }

    .btn-login:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .login-footer {
        text-align: center;
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #e0e0e0;
    }

    .login-footer a {
        color: #25d366;
        text-decoration: none;
        font-weight: 600;
    }

    .login-footer a:hover {
        text-decoration: underline;
    }

    .alert {
        padding: 1rem;
        border-radius: 6px;
        margin-bottom: 1rem;
    }

    .alert-danger {
        background: #fee;
        border: 1px solid #fcc;
        color: #c33;
    }

    .validation-message {
        color: #c33;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private LoginModel loginModel { get; set; } = new();
    private string errorMessage = string.Empty;
    private bool isLoggingIn = false;

    protected override void OnInitialized()
    {
        // Verificar autenticação após um pequeno delay para garantir que os cookies foram processados
        Task.Run(async () =>
        {
            await Task.Delay(100);
            await InvokeAsync(() =>
            {
                var httpContext = HttpContextAccessor.HttpContext;
                if (httpContext?.User?.Identity?.IsAuthenticated == true)
                {
                    Navigation.NavigateTo("/chat", forceLoad: true);
                }
            });
        });

        // Verificar se há mensagem de erro na query string
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (query["error"] != null)
        {
            errorMessage = query["error"] ?? "";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = "ocuspokus321";
        public string Password { get; set; } = "17361931";
    }
}